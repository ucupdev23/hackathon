query 1 untuk melihat semua pesanan dengan nama user tertentu

queri asli:
SELECT
    u.name AS user_name,
    o.order_date,
    o.total_amount,
    p.name AS product_name,
    oi.quantity,
    oi.price_at_order
FROM users u
JOIN orders o ON u.id = o.user_id
JOIN order_items oi ON o.id = oi.order_id
JOIN products p ON oi.product_id = p.id
WHERE u.name LIKE 'Rowland Walter%';

output dari EXPLAIN analyze query asli :
Nested Loop  (cost=2980.83..11197.88 rows=500 width=59) (actual time=21.282..60.001 rows=501 loops=1)
  ->  Gather  (cost=2980.55..11051.49 rows=500 width=52) (actual time=21.261..58.680 rows=501 loops=1)
        Workers Planned: 2
        Workers Launched: 2
        ->  Parallel Hash Join  (cost=1980.55..10001.49 rows=208 width=52) (actual time=9.643..44.574 rows=167 loops=3)
              Hash Cond: (oi.order_id = o.id)
              ->  Parallel Seq Scan on order_items oi  (cost=0.00..7238.42 rows=208342 width=28) (actual time=0.012..15.982 rows=166667 loops=3)
              ->  Parallel Hash  (cost=1979.82..1979.82 rows=59 width=40) (actual time=9.080..9.082 rows=31 loops=3)
                    Buckets: 1024  Batches: 1  Memory Usage: 104kB
                    ->  Hash Join  (cost=32.51..1979.82 rows=59 width=40) (actual time=0.575..8.812 rows=31 loops=3)
                          Hash Cond: (o.user_id = u.id)
                          ->  Parallel Seq Scan on orders o  (cost=0.00..1792.24 rows=58824 width=32) (actual time=0.015..4.482 rows=33333 loops=3)
                          ->  Hash  (cost=32.50..32.50 rows=1 width=24) (actual time=0.245..0.246 rows=1 loops=3)
                                Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                ->  Seq Scan on users u  (cost=0.00..32.50 rows=1 width=24) (actual time=0.027..0.239 rows=1 loops=3)
                                      Filter: ((name)::text ~~ 'Rowland Walter%'::text)
                                      Rows Removed by Filter: 999
  ->  Index Scan using products_pkey on products p  (cost=0.28..0.29 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=501)
        Index Cond: (id = oi.product_id)
Planning Time: 0.602 ms
Execution Time: 60.077 ms

analisis EXPLAIN analyze query asli :
Melakukan sequential scan pada tabel orders dan users.
Waktu eksekusi : 60.077 ms.

query optimal :
CREATE INDEX idx_orders_user_id ON orders (user_id);
SELECT
    u.name AS user_name,
    o.order_date,
    o.total_amount,
    p.name AS product_name,
    oi.quantity,
    oi.price_at_order
FROM users u
JOIN orders o ON u.id = o.user_id
JOIN order_items oi ON o.id = oi.order_id
JOIN products p ON oi.product_id = p.id
WHERE u.name LIKE 'Rowland Walter%';

output dari EXPLAIN analyze query optimal :
Nested Loop  (cost=1346.75..9564.65 rows=500 width=59) (actual time=3.372..47.684 rows=501 loops=1)
  ->  Gather  (cost=1346.47..9418.25 rows=500 width=52) (actual time=3.352..46.101 rows=501 loops=1)
        Workers Planned: 2
        Workers Launched: 2
        ->  Hash Join  (cost=346.47..8368.25 rows=208 width=52) (actual time=1.992..37.666 rows=167 loops=3)
              Hash Cond: (oi.order_id = o.id)
              ->  Parallel Seq Scan on order_items oi  (cost=0.00..7238.42 rows=208342 width=28) (actual time=0.059..17.127 rows=166667 loops=3)
              ->  Hash  (cost=345.22..345.22 rows=100 width=40) (actual time=1.359..1.361 rows=94 loops=3)
                    Buckets: 1024  Batches: 1  Memory Usage: 16kB
                    ->  Nested Loop  (cost=5.07..345.22 rows=100 width=40) (actual time=0.260..1.307 rows=94 loops=3)
                          ->  Seq Scan on users u  (cost=0.00..32.50 rows=1 width=24) (actual time=0.051..0.537 rows=1 loops=3)
                                Filter: ((name)::text ~~ 'Rowland Walter%'::text)
                                Rows Removed by Filter: 999
                          ->  Bitmap Heap Scan on orders o  (cost=5.07..311.72 rows=100 width=32) (actual time=0.205..0.735 rows=94 loops=3)
                                Recheck Cond: (u.id = user_id)
                                Heap Blocks: exact=89
                                ->  Bitmap Index Scan on idx_orders_user_id  (cost=0.00..5.04 rows=100 width=0) (actual time=0.173..0.173 rows=94 loops=3)
                                      Index Cond: (user_id = u.id)
  ->  Index Scan using products_pkey on products p  (cost=0.28..0.29 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=501)
        Index Cond: (id = oi.product_id)
Planning Time: 1.764 ms
Execution Time: 48.341 ms

analisis EXPLAIN analyze query optimal :
Eksekusi jadi lebih cepat dengan waktu eksekusi : 48.341 ms.

query 2 untuk melihat semua total pendapatan dari produk dengan deskripsi tertentu dan rentang waktu

queri asli:
SELECT
    SUM(oi.quantity * oi.price_at_order) AS total_revenue
FROM order_items oi
JOIN products p ON oi.product_id = p.id
JOIN orders o ON oi.order_id = o.id
WHERE p.description LIKE '%Sed%'
AND o.order_date BETWEEN '2025-01-01' AND '2025-03-31';

output dari EXPLAIN analyze query asli :
Finalize Aggregate  (cost=11035.69..11035.70 rows=1 width=32) (actual time=82.683..85.465 rows=1 loops=1)
  ->  Gather  (cost=11035.47..11035.68 rows=2 width=32) (actual time=82.498..85.456 rows=3 loops=1)
        Workers Planned: 2
        Workers Launched: 2
        ->  Partial Aggregate  (cost=10035.47..10035.48 rows=1 width=32) (actual time=74.806..74.809 rows=1 loops=3)
              ->  Parallel Hash Join  (cost=2218.47..10027.97 rows=999 width=12) (actual time=21.016..73.964 rows=960 loops=3)
                    Hash Cond: (oi.order_id = o.id)
                    ->  Hash Join  (cost=44.00..7831.63 rows=8334 width=20) (actual time=0.869..52.094 rows=7804 loops=3)
                          Hash Cond: (oi.product_id = p.id)
                          ->  Parallel Seq Scan on order_items oi  (cost=0.00..7238.42 rows=208342 width=28) (actual time=0.018..25.749 rows=166667 loops=3)
                          ->  Hash  (cost=43.50..43.50 rows=40 width=8) (actual time=0.804..0.804 rows=46 loops=3)
                                Buckets: 1024  Batches: 1  Memory Usage: 10kB
                                ->  Seq Scan on products p  (cost=0.00..43.50 rows=40 width=8) (actual time=0.031..0.784 rows=46 loops=3)
                                      Filter: (description ~~ '%Sed%'::text)
                                      Rows Removed by Filter: 954
                    ->  Parallel Hash  (cost=2086.35..2086.35 rows=7049 width=8) (actual time=19.227..19.228 rows=4037 loops=3)
                          Buckets: 16384  Batches: 1  Memory Usage: 672kB
                          ->  Parallel Seq Scan on orders o  (cost=0.00..2086.35 rows=7049 width=8) (actual time=0.067..17.602 rows=4037 loops=3)
                                Filter: ((order_date >= '2025-01-01 00:00:00'::timestamp without time zone) AND (order_date <= '2025-03-31 00:00:00'::timestamp without time zone))
                                Rows Removed by Filter: 29296
Planning Time: 11.211 ms
Execution Time: 85.613 ms

analisis EXPLAIN analyze query asli :
Melakukan sequential scan pada tabel products dan orders.
Waktu eksekusi : 85.613 ms.

query optimal :
CREATE INDEX idx_orders_order_date ON orders (order_date);
SELECT
    SUM(oi.quantity * oi.price_at_order) AS total_revenue
FROM order_items oi
JOIN products p ON oi.product_id = p.id
JOIN orders o ON oi.order_id = o.id
WHERE p.description LIKE '%Sed%'
AND o.order_date BETWEEN '2025-01-01' AND '2025-03-31';

output dari EXPLAIN analyze query optimal :
Finalize Aggregate  (cost=10518.21..10518.22 rows=1 width=32) (actual time=63.420..67.242 rows=1 loops=1)
  ->  Gather  (cost=10517.99..10518.20 rows=2 width=32) (actual time=63.112..67.212 rows=3 loops=1)
        Workers Planned: 2
        Workers Launched: 2
        ->  Partial Aggregate  (cost=9517.99..9518.00 rows=1 width=32) (actual time=57.792..57.798 rows=1 loops=3)
              ->  Parallel Hash Join  (cost=1700.98..9510.49 rows=999 width=12) (actual time=6.470..57.041 rows=960 loops=3)
                    Hash Cond: (oi.order_id = o.id)
                    ->  Hash Join  (cost=44.00..7831.63 rows=8334 width=20) (actual time=0.596..48.469 rows=7804 loops=3)
                          Hash Cond: (oi.product_id = p.id)
                          ->  Parallel Seq Scan on order_items oi  (cost=0.00..7238.42 rows=208342 width=28) (actual time=0.021..21.459 rows=166667 loops=3)
                          ->  Hash  (cost=43.50..43.50 rows=40 width=8) (actual time=0.539..0.540 rows=46 loops=3)
                                Buckets: 1024  Batches: 1  Memory Usage: 10kB
                                ->  Seq Scan on products p  (cost=0.00..43.50 rows=40 width=8) (actual time=0.044..0.522 rows=46 loops=3)
                                      Filter: (description ~~ '%Sed%'::text)
                                      Rows Removed by Filter: 954
                    ->  Parallel Hash  (cost=1568.87..1568.87 rows=7049 width=8) (actual time=4.978..4.979 rows=4037 loops=3)
                          Buckets: 16384  Batches: 1  Memory Usage: 640kB
                          ->  Parallel Bitmap Heap Scan on orders o  (cost=259.13..1568.87 rows=7049 width=8) (actual time=1.048..3.817 rows=4037 loops=3)
                                Recheck Cond: ((order_date >= '2025-01-01 00:00:00'::timestamp without time zone) AND (order_date <= '2025-03-31 00:00:00'::timestamp without time zone))
                                Heap Blocks: exact=631
                                ->  Bitmap Index Scan on idx_orders_order_date  (cost=0.00..256.13 rows=11984 width=0) (actual time=2.841..2.841 rows=12112 loops=1)
                                      Index Cond: ((order_date >= '2025-01-01 00:00:00'::timestamp without time zone) AND (order_date <= '2025-03-31 00:00:00'::timestamp without time zone))
Planning Time: 11.462 ms
Execution Time: 67.304 ms

analisis EXPLAIN analyze query optimal :
Eksekusi jadi lebih cepat dengan waktu eksekusi : 67.304 ms.

query 3 untuk melihat 10 produk paling laris

queri asli:
SELECT
    p.name,
    SUM(oi.quantity) AS total_sold
FROM order_items oi
JOIN products p ON oi.product_id = p.id
GROUP BY p.name
ORDER BY total_sold DESC
LIMIT 10;

output dari EXPLAIN analyze query asli :
Limit  (cost=10208.08..10208.11 rows=10 width=23) (actual time=115.166..118.708 rows=10 loops=1)
  ->  Sort  (cost=10208.08..10210.51 rows=972 width=23) (actual time=115.165..118.706 rows=10 loops=1)
        Sort Key: (sum(oi.quantity)) DESC
        Sort Method: top-N heapsort  Memory: 26kB
        ->  Finalize GroupAggregate  (cost=9940.82..10187.08 rows=972 width=23) (actual time=114.030..118.568 rows=972 loops=1)
              Group Key: p.name
              ->  Gather Merge  (cost=9940.82..10167.64 rows=1944 width=23) (actual time=114.022..118.203 rows=2916 loops=1)
                    Workers Planned: 2
                    Workers Launched: 2
                    ->  Sort  (cost=8940.80..8943.23 rows=972 width=23) (actual time=97.552..97.595 rows=972 loops=3)
                          Sort Key: p.name
                          Sort Method: quicksort  Memory: 65kB
                          Worker 0:  Sort Method: quicksort  Memory: 65kB
                          Worker 1:  Sort Method: quicksort  Memory: 65kB
                          ->  Partial HashAggregate  (cost=8882.84..8892.56 rows=972 width=23) (actual time=96.470..96.570 rows=972 loops=3)
                                Group Key: p.name
                                Batches: 1  Memory Usage: 193kB
                                Worker 0:  Batches: 1  Memory Usage: 193kB
                                Worker 1:  Batches: 1  Memory Usage: 193kB
                                ->  Hash Join  (cost=53.50..7841.13 rows=208342 width=19) (actual time=0.848..58.815 rows=166667 loops=3)
                                      Hash Cond: (oi.product_id = p.id)
                                      ->  Parallel Seq Scan on order_items oi  (cost=0.00..7238.42 rows=208342 width=12) (actual time=0.077..15.995 rows=166667 loops=3)
                                      ->  Hash  (cost=41.00..41.00 rows=1000 width=23) (actual time=0.672..0.672 rows=1000 loops=3)
                                            Buckets: 1024  Batches: 1  Memory Usage: 66kB
                                            ->  Seq Scan on products p  (cost=0.00..41.00 rows=1000 width=23) (actual time=0.034..0.315 rows=1000 loops=3)
Planning Time: 0.247 ms
Execution Time: 118.783 ms

analisis EXPLAIN analyze query asli :
Melakukan sequential scan pada tabel order_items.
Waktu eksekusi : 118.783 ms.

query optimal :
CREATE INDEX idx_order_items_product_id ON order_items (product_id);
SELECT
    p.name,
    SUM(oi.quantity) AS total_sold
FROM order_items oi
JOIN products p ON oi.product_id = p.id
GROUP BY p.name
ORDER BY total_sold DESC
LIMIT 10;

output dari EXPLAIN analyze query optimal :
Limit  (cost=10207.93..10207.95 rows=10 width=23) (actual time=96.440..98.151 rows=10 loops=1)
  ->  Sort  (cost=10207.93..10210.36 rows=972 width=23) (actual time=96.439..98.149 rows=10 loops=1)
        Sort Key: (sum(oi.quantity)) DESC
        Sort Method: top-N heapsort  Memory: 26kB
        ->  Finalize GroupAggregate  (cost=9940.66..10186.92 rows=972 width=23) (actual time=95.419..98.029 rows=972 loops=1)
              Group Key: p.name
              ->  Gather Merge  (cost=9940.66..10167.48 rows=1944 width=23) (actual time=95.410..97.679 rows=2916 loops=1)
                    Workers Planned: 2
                    Workers Launched: 2
                    ->  Sort  (cost=8940.64..8943.07 rows=972 width=23) (actual time=83.425..83.480 rows=972 loops=3)
                          Sort Key: p.name
                          Sort Method: quicksort  Memory: 65kB
                          Worker 0:  Sort Method: quicksort  Memory: 65kB
                          Worker 1:  Sort Method: quicksort  Memory: 65kB
                          ->  Partial HashAggregate  (cost=8882.69..8892.41 rows=972 width=23) (actual time=82.373..82.463 rows=972 loops=3)
                                Group Key: p.name
                                Batches: 1  Memory Usage: 193kB
                                Worker 0:  Batches: 1  Memory Usage: 193kB
                                Worker 1:  Batches: 1  Memory Usage: 193kB
                                ->  Hash Join  (cost=53.50..7841.02 rows=208333 width=19) (actual time=0.478..48.902 rows=166667 loops=3)
                                      Hash Cond: (oi.product_id = p.id)
                                      ->  Parallel Seq Scan on order_items oi  (cost=0.00..7238.33 rows=208333 width=12) (actual time=0.011..12.149 rows=166667 loops=3)
                                      ->  Hash  (cost=41.00..41.00 rows=1000 width=23) (actual time=0.435..0.435 rows=1000 loops=3)
                                            Buckets: 1024  Batches: 1  Memory Usage: 66kB
                                            ->  Seq Scan on products p  (cost=0.00..41.00 rows=1000 width=23) (actual time=0.016..0.196 rows=1000 loops=3)
Planning Time: 0.287 ms
Execution Time: 98.210 ms

analisis EXPLAIN analyze query optimal :
Eksekusi jadi lebih cepat dengan waktu eksekusi : 98.210 ms.

query 4 untuk mencari user yang belum pernah order

queri asli:
SELECT u.id, u.name, u.email
FROM users u
WHERE u.id NOT IN (SELECT DISTINCT user_id FROM orders);

output dari EXPLAIN analyze query asli :
Seq Scan on users u  (cost=2466.50..2499.00 rows=500 width=47) (actual time=30.055..30.058 rows=0 loops=1)
  Filter: (NOT (ANY (id = (hashed SubPlan 1).col1)))
  Rows Removed by Filter: 1000
  SubPlan 1
    ->  HashAggregate  (cost=2454.00..2464.00 rows=1000 width=8) (actual time=29.528..29.637 rows=1000 loops=1)
          Group Key: orders.user_id
          Batches: 1  Memory Usage: 129kB
          ->  Seq Scan on orders  (cost=0.00..2204.00 rows=100000 width=8) (actual time=0.004..10.062 rows=100000 loops=1)
Planning Time: 0.094 ms
Execution Time: 30.118 ms

analisis EXPLAIN analyze query asli :
Melakukan sequential scan pada users.
Waktu eksekusi : 30.118 ms.

query optimal :
CREATE INDEX idx_orders_user_id ON orders (user_id);
SELECT u.id, u.name, u.email
FROM users u
WHERE u.id NOT IN (SELECT DISTINCT user_id FROM orders);

output dari EXPLAIN analyze query optimal :
Seq Scan on users u  (cost=2466.50..2499.00 rows=500 width=47) (actual time=17.322..17.323 rows=0 loops=1)
  Filter: (NOT (ANY (id = (hashed SubPlan 1).col1)))
  Rows Removed by Filter: 1000
  SubPlan 1
    ->  HashAggregate  (cost=2454.00..2464.00 rows=1000 width=8) (actual time=16.851..16.941 rows=1000 loops=1)
          Group Key: orders.user_id
          Batches: 1  Memory Usage: 129kB
          ->  Seq Scan on orders  (cost=0.00..2204.00 rows=100000 width=8) (actual time=0.011..5.914 rows=100000 loops=1)
Planning Time: 2.693 ms
Execution Time: 17.366 ms

analisis EXPLAIN analyze query optimal :
Eksekusi jadi lebih cepat dengan waktu eksekusi : 17.366 ms.

query 5 untuk menghitung jumlah Pesanan dan total pendapatan per bulan untuk setiap user

queri asli:
SELECT
    u.name AS user_name,
    TO_CHAR(o.order_date, 'YYYY-MM') AS order_month,
    COUNT(o.id) AS total_orders_in_month,
    SUM(o.total_amount) AS total_spent_in_month
FROM users u
JOIN orders o ON u.id = o.user_id
GROUP BY u.name, order_month
ORDER BY u.name, order_month;

output dari EXPLAIN analyze query asli :
GroupAggregate  (cost=14827.43..17577.43 rows=100000 width=88) (actual time=284.274..334.727 rows=24379 loops=1)
  Group Key: u.name, (to_char(o.order_date, 'YYYY-MM'::text))
  ->  Sort  (cost=14827.43..15077.43 rows=100000 width=64) (actual time=283.068..307.536 rows=100000 loops=1)
        Sort Key: u.name, (to_char(o.order_date, 'YYYY-MM'::text))
        Sort Method: external merge  Disk: 5400kB
        ->  Hash Join  (cost=42.50..2760.11 rows=100000 width=64) (actual time=13.164..55.275 rows=100000 loops=1)
              Hash Cond: (o.user_id = u.id)
              ->  Seq Scan on orders o  (cost=0.00..2204.00 rows=100000 width=32) (actual time=0.014..7.966 rows=100000 loops=1)
              ->  Hash  (cost=30.00..30.00 rows=1000 width=24) (actual time=0.289..0.290 rows=1000 loops=1)
                    Buckets: 1024  Batches: 1  Memory Usage: 67kB
                    ->  Seq Scan on users u  (cost=0.00..30.00 rows=1000 width=24) (actual time=0.007..0.160 rows=1000 loops=1)
Planning Time: 4.691 ms
Execution Time: 336.442 ms

analisis EXPLAIN analyze query asli :
Melakukan sequential scan pada orders.
Waktu eksekusi : 336.442 ms.

query optimal :
CREATE INDEX idx_orders_user_month_truncated ON orders (user_id, DATE_TRUNC('month', order_date));
SELECT
    u.name AS user_name,
    DATE_TRUNC('month', o.order_date) AS order_month,
    COUNT(o.id) AS total_orders_in_month,
    SUM(o.total_amount) AS total_spent_in_month
FROM users u
JOIN orders o ON u.id = o.user_id
GROUP BY u.id, u.name, order_month
ORDER BY u.name, order_month;

output dari EXPLAIN analyze query optimal :
Sort  (cost=23527.89..23777.89 rows=100000 width=72) (actual time=117.429..118.355 rows=24379 loops=1)
  Sort Key: u.name, (date_trunc('month'::text, o.order_date))
  Sort Method: quicksort  Memory: 2579kB
  ->  GroupAggregate  (cost=0.57..11121.07 rows=100000 width=72) (actual time=0.117..100.383 rows=24379 loops=1)
        Group Key: u.id, date_trunc('month'::text, o.order_date)
        ->  Merge Join  (cost=0.57..8621.07 rows=100000 width=48) (actual time=0.023..74.349 rows=100000 loops=1)
              Merge Cond: (o.user_id = u.id)
              ->  Index Scan using idx_orders_user_month_truncated on orders o  (cost=0.29..7060.29 rows=100000 width=32) (actual time=0.009..53.199 rows=100000 loops=1)
              ->  Index Scan using users_pkey on users u  (cost=0.28..58.27 rows=1000 width=24) (actual time=0.007..0.725 rows=1000 loops=1)
Planning Time: 3.456 ms
Execution Time: 121.170 ms

analisis EXPLAIN analyze query optimal :
Eksekusi jadi lebih cepat dengan waktu eksekusi : 121.170 ms.





